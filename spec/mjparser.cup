package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

import java.util.LinkedList;

parser code {:

	Logger log = Logger.getLogger(getClass());  
    
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROGRAM, PRINT, READ;
terminal PLUS, MINUS, ASTERISK, PERCENT, ASSIGN;
terminal INCREMENT, DECREMENT;
terminal SEMICOLON, COMMA;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LSQUARE, RSQUARE;
terminal CONST_MODIFIER, VOID_TYPE, INT_TYPE, CHAR_TYPE, BOOL_TYPE, TRUE, FALSE;

terminal Integer NUMBER;
terminal String IDENTIFIER, CHAR;

nonterminal Program, Declaration, ConstDeclaration, VarDeclaration,
	Assignment, Expression,
	GlobalDeclarations, MainFunction, StatementList, Statement;

nonterminal String Type;
nonterminal java.util.List CascadingSymbols;

start with Program;

Program ::= (Program) PROGRAM IDENTIFIER:name LBRACE GlobalDeclarations MainFunction RBRACE;


GlobalDeclarations ::= Declaration GlobalDeclarations | /* or empty*/;

Declaration ::= ConstDeclaration | VarDeclaration;

ConstDeclaration ::= (ConstDeclaration) CONST_MODIFIER Type:type Assignment SEMICOLON;

VarDeclaration ::= (VarDeclarationNoAssignment) Type IDENTIFIER:symbolName SEMICOLON
	| (VarDeclarationWithAssignment) Type:type Assignment SEMICOLON;

Type ::= INT_TYPE | BOOL_TYPE | CHAR_TYPE;

Assignment ::= (Assignment) CascadingSymbols Expression;
CascadingSymbols ::= IDENTIFIER:symbolName ASSIGN | CascadingSymbols IDENTIFIER:symbolName ASSIGN;

Expression ::= NUMBER | CHAR | TRUE | FALSE;

MainFunction ::= VOID_TYPE IDENTIFIER:functionName LPAREN RPAREN LBRACE StatementList RBRACE;

StatementList ::= Statement StatementList | /* or empty */;

Statement ::= /* TODO: implement */ SEMICOLON;