package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;
import rs.etf.pp1.symboltable.concepts.*;

parser code {:

	Logger log = Logger.getLogger(getClass());  
    
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROGRAM, PRINT, READ, NEW;
terminal PLUS, MINUS, ASTERISK, SLASH, PERCENT, ASSIGN;
terminal INCREMENT, DECREMENT;
terminal SEMICOLON, COMMA;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LSQUARE, RSQUARE;
terminal CONST_MODIFIER, TRUE, FALSE;

terminal Integer NUMBER;
terminal String IDENTIFIER, CHAR;

nonterminal DeclarationList, ConstDecl, ConstValue, VarDecl, VarSymbolList, VarSymbol,
			MethodList, FormPars, StatementList, Statement,
			AddOperations, MulOperations, Addop, Mulop;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgramName, Method, MethodTypeName, Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Factor, Expression;

start with Program;

Program ::= (Program) PROGRAM ProgramName:programName DeclarationList LBRACE MethodList RBRACE;
ProgramName ::= (ProgramName) IDENTIFIER:name;

DeclarationList ::= (DeclarationListWithConst) DeclarationList ConstDecl
				| (DeclarationListWithVar) DeclarationList VarDecl
				| (DeclarationListEmpty) /* or empty */;

ConstDecl ::= (ConstDeclaration) CONST_MODIFIER Type:typeName IDENTIFIER:symbolName ASSIGN ConstValue SEMICOLON;

VarDecl ::=  (VarDeclaration) Type:typeName VarSymbolList:varSymbols SEMICOLON;
VarSymbolList ::= (VarSymbols) VarSymbolList COMMA VarSymbol:varSymbol
			| (VarSymbolSingle) VarSymbol:varSymbol;
VarSymbol ::= (VarWithValue) IDENTIFIER:symbolName ASSIGN ConstValue
			| (VarNoValue) IDENTIFIER:symbolName
			| (VarArray) IDENTIFIER:symbolName LSQUARE RSQUARE;

ConstValue ::= (ConstValueInt) NUMBER:value | (ConstValueChar) CHAR:value;
Type ::= (Type) IDENTIFIER:typeName;

MethodList ::= (Methods) MethodList Method | (MethodListEmpty) /* or empty */;
Method ::= (Method) MethodTypeName:methodTypeName LPAREN FormPars RPAREN DeclarationList LBRACE StatementList RBRACE;
MethodTypeName ::= (MethodTypeName) Type:returnType IDENTIFIER:name;
FormPars ::= (FormalParameters) /* empty for now */;

StatementList ::= StatementList Statement | /* or empty */;
Statement ::= (StatementAssign) Designator ASSIGN Expression SEMICOLON
			| (StatementIncrement) Designator INCREMENT SEMICOLON
			| (StatementDecrement) Designator DECREMENT SEMICOLON
			| (StatementPrint) PRINT LPAREN Expression RPAREN SEMICOLON
			| (StatementRead) READ LPAREN Designator RPAREN SEMICOLON
			| (StatementAllocateArray) Designator ASSIGN NEW Type LSQUARE Expression RSQUARE SEMICOLON;

Designator ::= IDENTIFIER:designatorName | IDENTIFIER LSQUARE Expression RSQUARE;


Expression ::= MINUS Term AddOperations | Term AddOperations;

AddOperations ::= AddOperations Addop Term | /* or empty */;

Addop ::= PLUS | MINUS;

Term ::= Factor MulOperations;

MulOperations ::= MulOperations Mulop Factor | /* or empty */;

Mulop ::= ASTERISK | SLASH | PERCENT;

Factor ::= ConstValue | Designator | LPAREN Expression RPAREN;