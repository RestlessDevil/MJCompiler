package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());  
    
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROGRAM, IDENTIFIER, PRINT, READ;
terminal PLUS, MINUS, ASTERISK, PERCENT, ASSIGN;
terminal INCREMENT, DECREMENT;
terminal SEMICOLON, COMMA, APOS;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LSQUARE, RSQUARE;
terminal CONST_MODIFIER, VOID_TYPE, INT_TYPE, CHAR_TYPE, BOOL_TYPE, NUMBER, CHAR, TRUE, FALSE;

nonterminal Program Program;
nonterminal DeclarationList DeclarationList;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal PrintStatement PrintStatement;
nonterminal Declaration Declaration;
nonterminal ConstDeclaration ConstDeclaration;
nonterminal VarDeclaration VarDeclaration;
nonterminal AssignmentStatement AssignmentStatement;
nonterminal IntAssignment IntAssignment;
nonterminal CharAssignment CharAssignment;
nonterminal BoolAssignment BoolAssignment;
nonterminal MainFunction MainFunction;
nonterminal BoolValue BoolValue;

start with Program;

Program ::= (Program) PROGRAM IDENTIFIER:name LBRACE DeclarationList:D1 MainFunction:M2 RBRACE {: RESULT=new Program(D1, M2); RESULT.setLine(D1left); :};

DeclarationList ::= DeclarationList:D1 Declaration:D2 {: RESULT=new DeclarationListDerived1(D1, D2); RESULT.setLine(D1left); :} | {: RESULT=new DeclarationListDerived2(); :} /* empty list */;

StatementList ::= StatementList:S1 Statement:S2 {: RESULT=new StatementListDerived1(S1, S2); RESULT.setLine(S1left); :} | {: RESULT=new StatementListDerived2(); :} /* empty list */;

Statement ::= Declaration:D1 {: RESULT=new StatementDerived1(D1); RESULT.setLine(D1left); :} | PrintStatement:P1 {: RESULT=new StatementDerived2(P1); RESULT.setLine(P1left); :};
PrintStatement ::= PRINT LPAREN NUMBER RPAREN SEMICOLON {: RESULT=new PrintStatementDerived1(); :};

Declaration ::= ConstDeclaration:C1 {: RESULT=new DeclarationDerived1(C1); RESULT.setLine(C1left); :} | VarDeclaration:V1 {: RESULT=new DeclarationDerived2(V1); RESULT.setLine(V1left); :};
ConstDeclaration ::= CONST_MODIFIER AssignmentStatement:A1 {: RESULT=new ConstDeclarationDerived1(A1); RESULT.setLine(A1left); :};
VarDeclaration ::= AssignmentStatement:A1 {: RESULT=new VarDeclarationDerived1(A1); RESULT.setLine(A1left); :};

AssignmentStatement ::= IntAssignment:I1 SEMICOLON {: RESULT=new AssignmentStatementDerived1(I1); RESULT.setLine(I1left); :} | CharAssignment:C1 SEMICOLON {: RESULT=new AssignmentStatementDerived2(C1); RESULT.setLine(C1left); :} | BoolAssignment:B1 SEMICOLON {: RESULT=new AssignmentStatementDerived3(B1); RESULT.setLine(B1left); :};
IntAssignment ::= (IntAssignment) INT_TYPE IDENTIFIER ASSIGN NUMBER:value {: RESULT=new IntAssignment(); :};
CharAssignment ::= CHAR_TYPE IDENTIFIER:name ASSIGN CHAR:value {: RESULT=new CharAssignmentDerived1(); :};
BoolAssignment ::= (BoolAssignment) BOOL_TYPE IDENTIFIER:name ASSIGN BoolValue:value {: RESULT=new BoolAssignment(value); RESULT.setLine(valueleft); :};
BoolValue ::= TRUE:trueVal {: RESULT=new BoolValueDerived1(); :} | FALSE:falseVal {: RESULT=new BoolValueDerived2(); :};
				
MainFunction ::= (MainFunction) VOID_TYPE IDENTIFIER:name LPAREN RPAREN LBRACE StatementList:S1 RBRACE {: RESULT=new MainFunction(S1); RESULT.setLine(S1left); :};