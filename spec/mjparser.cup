package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());  
    
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROGRAM, IDENTIFIER, PRINT, READ;
terminal PLUS, MINUS, ASTERISK, PERCENT, ASSIGN;
terminal INCREMENT, DECREMENT;
terminal SEMICOLON, COMMA, APOS;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LSQUARE, RSQUARE;
terminal CONST_MODIFIER, VOID_TYPE, INT_TYPE, CHAR_TYPE, BOOL_TYPE, NUMBER, CHAR, TRUE, FALSE;

nonterminal Program, DeclarationList, StatementList, Statement, PrintStatement, Declaration, ConstDeclaration, VarDeclaration, AssignmentStatement, IntAssignment, CharAssignment, BoolAssignment, MainFunction, BoolValue;

start with Program;

Program ::= (Program) PROGRAM IDENTIFIER:name LBRACE DeclarationList MainFunction RBRACE;

DeclarationList ::= DeclarationList Declaration | /* empty list */;

StatementList ::= StatementList Statement | /* empty list */;

Statement ::= Declaration | PrintStatement;
PrintStatement ::= PRINT LPAREN NUMBER RPAREN SEMICOLON;

Declaration ::= ConstDeclaration | VarDeclaration;
ConstDeclaration ::= CONST_MODIFIER AssignmentStatement;
VarDeclaration ::= AssignmentStatement;

AssignmentStatement ::= IntAssignment SEMICOLON | CharAssignment SEMICOLON | BoolAssignment SEMICOLON;
IntAssignment ::= (IntAssignment) INT_TYPE IDENTIFIER ASSIGN NUMBER:value;
CharAssignment ::= CHAR_TYPE IDENTIFIER:name ASSIGN CHAR:value;
BoolAssignment ::= (BoolAssignment) BOOL_TYPE IDENTIFIER:name ASSIGN BoolValue:value;
BoolValue ::= TRUE:trueVal | FALSE:falseVal;
				
MainFunction ::= (MainFunction) VOID_TYPE IDENTIFIER:name LPAREN RPAREN LBRACE StatementList RBRACE;